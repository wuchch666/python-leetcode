###为避免混淆，全部采左闭右闭的写法
###right表示大的那一端，left表示小的那一端，mid表示二分法的中间值


1. leetcode704

给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。
‘’‘
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid #目标值存在
            elif nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1
        return -1 #目标值不存在
’‘’

2. leetcode35
给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。

请必须使用时间复杂度为 O(log n) 的算法。
‘’‘
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums) - 1
        
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid #目标值存在则替换原有位置
            elif nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1
        
        # 如果循环结束时仍未找到目标值，则返回 left，即目标值应插入的位置
        return left #目标值不存在，则在两端插入
‘’‘

3. leetcode34
给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。

如果数组中不存在目标值 target，返回 [-1, -1]。

你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。
‘’‘
class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        def binarySearch(nums,target):
            left , right = 0 , len(nums) - 1
            while left <= right:
                mid = (left+right)//2
                if nums[mid] > target:
                    right = mid - 1
                elif nums[mid] < target:
                    left = mid +1 
                else:
                    return mid
            return -1

        index = binarySearch(nums, target) #还是二分法的思想，只不过追加一个判断
        left,right = index,index
        if index == -1 :
            return [-1,-1]
        while left -1 >=0 and nums[left-1] == target:
            left -=1
        while right +1 <len(nums) and nums[right +1]==target:
            right +=1
        return left,right
’‘’

4. leetcode69 求算数平方根
给你一个非负整数 x ，计算并返回 x 的 算术平方根 。

由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。

注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。
‘’‘
class Solution:
    def mySqrt(self, x: int) -> int:
        right , left  = x , 1,
        while left <= right:
            mid = (right+left)//2
            if mid * mid <x :
                left =mid +1
            elif mid*mid >x:
                right =mid-1
            else:
                return mid
            
        return left-1 #相当于二分法求出开方后具体值在3停住，舍弃小数的话，需要后退一位
’‘’

5. leetcode367 求有效完全平方数
给你一个正整数 num 。如果 num 是一个完全平方数，则返回 true ，否则返回 false 。

完全平方数 是一个可以写成某个整数的平方的整数。换句话说，它可以写成某个整数和自身的乘积。

不能使用任何内置的库函数，如  sqrt 。
‘’‘
class Solution:
    def isPerfectSquare(self, num: int) -> bool:
        left, right = 1, num
        while left <= right:
            mid = (left + right) // 2
            if mid * mid < num:
                left = mid + 1
            elif mid * mid > num:
                right = mid - 1
            else:
                return True
        return False
’‘’






